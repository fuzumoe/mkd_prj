name: Deploy to Heroku (multi‑container)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DJANGO_APP: mkd-django-backend
      FLASK_APP: mkd-flask-api
      FRONT_APP: mkd-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install-ubuntu.sh | sh

      - name: Log in to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com
          heroku container:login

      - name: Deploy Django Backend
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Remove existing Django app
          heroku apps:destroy -a $DJANGO_APP --confirm $DJANGO_APP || echo "Django app doesn't exist or already removed"
          
          # Create Django app
          heroku create $DJANGO_APP
          heroku stack:set container -a $DJANGO_APP
          
          # Set config vars
          heroku config:set \
            STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
            DJANGO_SETTINGS_MODULE="myproject.settings" \
            DEBUG="False" \
            APP_NAME="$DJANGO_APP" \
            ALLOWED_HOSTS="localhost,127.0.0.1,.herokuapp.com,${DJANGO_APP}.herokuapp.com" \
            -a $DJANGO_APP
          
          # Build and push Django container
          cd backend
          heroku container:push web -a $DJANGO_APP
          heroku container:release web -a $DJANGO_APP
          cd ..

      - name: Deploy Flask API
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Remove existing Flask app
          heroku apps:destroy -a $FLASK_APP --confirm $FLASK_APP || echo "Flask app doesn't exist or already removed"
          
          # Create Flask app
          heroku create $FLASK_APP
          heroku stack:set container -a $FLASK_APP
          
          # Build and push Flask container
          cd ai-model-api
          heroku container:push web -a $FLASK_APP
          heroku container:release web -a $FLASK_APP
          cd ..

      - name: Deploy React Frontend
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Remove existing Frontend app
          heroku apps:destroy -a $FRONT_APP --confirm $FRONT_APP || echo "Frontend app doesn't exist or already removed"
          
          # Create Frontend app
          heroku create $FRONT_APP
          heroku stack:set container -a $FRONT_APP
          
          # Build and push Frontend container
          docker build \
            -t "registry.heroku.com/${FRONT_APP}/web" \
            --build-arg VITE_DJANGO_API_URL="https://${DJANGO_APP}.herokuapp.com" \
            --build-arg VITE_FLASK_API_URL="https://${FLASK_APP}.herokuapp.com" \
            -f frontend/Dockerfile frontend
          
          docker push "registry.heroku.com/${FRONT_APP}/web"
          heroku container:release web -a $FRONT_APP

      - name: Wait for Releases to Complete
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "⏳ Waiting for container releases to complete..."
          
          # Wait for Django release
          if heroku apps:info -a $DJANGO_APP >/dev/null 2>&1; then
            echo "🔄 Waiting for Django release..."
            for i in {1..12}; do
              if heroku ps -a $DJANGO_APP | grep -q "web.*up"; then
                echo "✅ Django release completed"
                break
              fi
              echo "   Attempt $i/12: Django still starting..."
              sleep 10
            done
          fi
          
          # Wait for Flask release
          if heroku apps:info -a $FLASK_APP >/dev/null 2>&1; then
            echo "🔄 Waiting for Flask release..."
            for i in {1..12}; do
              if heroku ps -a $FLASK_APP | grep -q "web.*up"; then
                echo "✅ Flask release completed"
                break
              fi
              echo "   Attempt $i/12: Flask still starting..."
              sleep 10
            done
          fi
          
          # Wait for React release
          if heroku apps:info -a $FRONT_APP >/dev/null 2>&1; then
            echo "🔄 Waiting for React release..."
            for i in {1..12}; do
              if heroku ps -a $FRONT_APP | grep -q "web.*up"; then
                echo "✅ React release completed"
                break
              fi
              echo "   Attempt $i/12: React still starting..."
              sleep 10
            done
          fi
          
          echo "🎯 All releases checked - proceeding to health checks"

      - name: Health Check Deployed Services
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "🔍 Checking service health..."
          
          # Check Django health
          if heroku apps:info -a $DJANGO_APP >/dev/null 2>&1; then
            django_url=$(heroku info -a $DJANGO_APP | grep "Web URL" | awk '{print $3}')
            echo "🩺 Testing Django health endpoint..."
            if curl -f "${django_url}health/" --max-time 30; then
              echo "✅ Django backend is healthy"
            else
              echo "⚠️ Django backend health check failed"
            fi
          fi
          
          # Check Flask health
          if heroku apps:info -a $FLASK_APP >/dev/null 2>&1; then
            flask_url=$(heroku info -a $FLASK_APP | grep "Web URL" | awk '{print $3}')
            echo "🩺 Testing Flask health endpoint..."
            if curl -f "${flask_url}health" --max-time 30; then
              echo "✅ Flask API is healthy"
            else
              echo "⚠️ Flask API health check failed"
            fi
          fi
          
          # Check React frontend
          if heroku apps:info -a $FRONT_APP >/dev/null 2>&1; then
            react_url=$(heroku info -a $FRONT_APP | grep "Web URL" | awk '{print $3}')
            echo "🩺 Testing React frontend..."
            if curl -f "${react_url}" --max-time 30; then
              echo "✅ React frontend is healthy"
            else
              echo "⚠️ React frontend health check failed"
            fi
          fi

      - name: Display Deployment URLs
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "🌐 Deployed Applications:"
          
          # Get actual Django URL
          if heroku apps:info -a $DJANGO_APP >/dev/null 2>&1; then
            django_url=$(heroku info -a $DJANGO_APP | grep "Web URL" | awk '{print $3}')
            echo "📱 Django Backend: ${django_url}health/"
          else
            echo "📱 Django Backend: ❌ Not deployed"
          fi
          
          # Get actual Flask URL
          if heroku apps:info -a $FLASK_APP >/dev/null 2>&1; then
            flask_url=$(heroku info -a $FLASK_APP | grep "Web URL" | awk '{print $3}')
            echo "🔬 Flask API: ${flask_url}health"
          else
            echo "🔬 Flask API: ❌ Not deployed"
          fi
          
          # Get actual React URL
          if heroku apps:info -a $FRONT_APP >/dev/null 2>&1; then
            react_url=$(heroku info -a $FRONT_APP | grep "Web URL" | awk '{print $3}')
            echo "⚛️ React Frontend: ${react_url}"
          else
            echo "⚛️ React Frontend: ❌ Not deployed"
          fi