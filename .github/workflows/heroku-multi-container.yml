name: Deploy to Heroku (multi‚Äëcontainer)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DJANGO_APP: mkd-django-backend
      FLASK_APP: mkd-flask-api
      FRONT_APP: mkd-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Heroku CLI
        run: |
          sudo snap install heroku --classic

      - name: Log in to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com
          heroku container:login

      - name: Deploy Django Backend
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Remove existing Django app
          heroku apps:destroy -a $DJANGO_APP --confirm $DJANGO_APP || echo "Django app doesn't exist or already removed"
          
          # Create Django app
          heroku create $DJANGO_APP
          heroku stack:set container -a $DJANGO_APP
          
          # Set config vars
          heroku config:set \
            STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
            DJANGO_SETTINGS_MODULE="myproject.settings" \
            DEBUG="False" \
            APP_NAME="$DJANGO_APP" \
            ALLOWED_HOSTS="localhost,127.0.0.1,.herokuapp.com,${DJANGO_APP}.herokuapp.com" \
            -a $DJANGO_APP
          
          # Build and push Django container
          cd backend
          heroku container:push web -a $DJANGO_APP
          heroku container:release web -a $DJANGO_APP
          cd ..

      - name: Deploy Flask API
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Remove existing Flask app
          heroku apps:destroy -a $FLASK_APP --confirm $FLASK_APP || echo "Flask app doesn't exist or already removed"
          
          # Create Flask app
          heroku create $FLASK_APP
          heroku stack:set container -a $FLASK_APP
          
          # Build and push Flask container
          cd ai-model-api
          heroku container:push web -a $FLASK_APP
          heroku container:release web -a $FLASK_APP
          cd ..

      - name: Deploy React Frontend
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          # Remove existing Frontend app
          heroku apps:destroy -a $FRONT_APP --confirm $FRONT_APP || echo "Frontend app doesn't exist or already removed"
          
          # Create Frontend app
          heroku create $FRONT_APP
          heroku stack:set container -a $FRONT_APP
          
          # Build and push Frontend container
          docker build \
            -t "registry.heroku.com/${FRONT_APP}/web" \
            --build-arg VITE_DJANGO_API_URL="https://${DJANGO_APP}.herokuapp.com" \
            --build-arg VITE_FLASK_API_URL="https://${FLASK_APP}.herokuapp.com" \
            -f frontend/Dockerfile frontend
          
          docker push "registry.heroku.com/${FRONT_APP}/web"
          heroku container:release web -a $FRONT_APP

      - name: Display Deployment URLs
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "üåê Deployed Applications:"
          echo "üì± Django Backend: https://${DJANGO_APP}.herokuapp.com/health/"
          echo "üî¨ Flask API: https://${FLASK_APP}.herokuapp.com/health"
          echo "‚öõÔ∏è React Frontend: https://${FRONT_APP}.herokuapp.com/"